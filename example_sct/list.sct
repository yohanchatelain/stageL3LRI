constructor Zero 0
constructor Succ 1

constructor Or 2
constructor True 0
constructor False 0

constructor Equal 2

constructor Nil 0
constructor Cons 2

let rec less x y = 
match (x,y) with
| (_,Zero) -> False
| (Zero,_) -> True
| (Succ x,Succ y) -> less x y
end 

let rec length l =
match l with 
| Nil -> Zero
| Cons _ r -> Succ (length r)
end

let rec mem x l =
match l with
| Nil -> False
| Cons y r -> Or (Equal x y) (mem x r)
end

let rec nth n l = 
match (l,n) with 
| (Nil,_) ->  Nil
| (Cons x _,Zero) -> x
| (Cons x r,Succ n) -> nth n r
end

let rec append l1 l2 = 
match l1 with
| Nil -> l2
| Cons x1 r1 -> Cons x1 (append r1 l2)
end

and reverse l =
match l with 
| Nil -> Nil 
| Cons x r -> append (reverse r) (Cons x Nil)
end

let rec fold_left acc l =
match l with 
| Nil -> acc
| Cons x r -> fold_left (f acc x) r 
end

and f a b = Cons a b 

let rec fold_right l acc = 
match l with 
| Nil -> acc
| Cons x r -> f x (fold_right r acc)
end

and f a b = Cons a b
 
let rec merge l1 l2 =
  match (l1,l2) with
  | (Nil,_) -> l2
  | (Cons c1 l1s,Nil) -> l1
  | (Cons c1 l1s,Cons c2 l2s) -> 
    if (less c1 c2) then
      Cons c1 (merge l1s l2)
    else
      Cons c2 (merge l1 l2s)
end 
